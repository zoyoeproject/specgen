Require Import Core.monadic.
Require Import Core.memory.
Require Import ZArith.

(* A demo setup of types
 * Usually the following types are generated by an llvm
 * bc translator which extracts types involved in a certain
 * c project into the following coq types
 * By default we have Int, Void
 * For demo we suppose c struct A { int a; } is defined in
 * the c project.
 *)
Inductive CType :=
| Int
| Void
| T_A
.

Record t_A := {
  a := Z
}.

#[refine] Instance CType_as_type_ind : type_of_ind CType :=
  {
  to c_type := match c_type with
               | Int => Z
               | Void => unit
               | T_A => t_A
               end
  ;
  beq a b := match a, b with
             | Int, Int => true
             | Void, Void => true
             | T_A, T_A => true
             | _, _ => false
             end
  }.
Proof.
  unfold Bool.Is_true.
  destruct o, o'; firstorder.
Qed.

(* A demo translated function *)
Definition
  test_func ref
  :=
    o %= get_obj ref T_A;
    set_obj o ref;;
    ret o
.

(* A lot work needs to be done further to access the fields of struct A *)
